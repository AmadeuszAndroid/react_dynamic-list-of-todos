{"version":3,"sources":["types/FilterMode.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","api.ts","App.tsx","index.tsx"],"names":["FilterMode","TodoInfo","todo","id","title","completed","onEyeButtonClick","detailsButtonClassNames","todoStatusClass","classNames","className","type","onClick","TodoList","todos","clickedTodoId","map","todoId","buttonClassName","TodoFilter","getTodos","useState","all","filterMode","setFilterMode","query","setQuery","onChange","event","mode","target","value","active","placeholder","inputQuery","style","pointerEvents","document","getElementsByClassName","Loader","TodoModal","info","todoTitle","todoCompleted","userEmail","userName","showModalLoader","onModalClose","todoStatusText","href","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","fetchedTodos","initialModalInfo","App","displayedTodos","setDisplayedTodos","todosLoaded","setTodosLoaded","showModal","setShowModal","modalInfo","setModalInfo","setClickedTodoId","useEffect","extracted","modeActive","modeCompleted","filter","includes","trim","toLocaleLowerCase","userId","modalTodo","find","user","email","name","oldInfo","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e5427171.chunk.js","sourcesContent":["export enum FilterMode {\n  all,\n  active,\n  completed,\n}\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype TodoInfoProps = {\n  todo: Todo\n  onEyeButtonClick: (todoId: number) => void\n  detailsButtonClassNames: string\n};\n\nexport const TodoInfo = (\n  {\n    todo: {\n      id,\n      title,\n      completed,\n    },\n    onEyeButtonClick,\n    detailsButtonClassNames,\n  }: TodoInfoProps,\n) => {\n  const todoStatusClass = classNames(`has-text-${completed ? 'success' : 'danger'}`);\n\n  return (\n    <tr data-cy=\"todo\">\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={todoStatusClass}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onEyeButtonClick(id)}\n        >\n          <span className=\"icon\">\n            <i className={detailsButtonClassNames} />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype TodoListProps = {\n  todos: Todo[]\n  onEyeButtonClick: (todoId: number) => void\n  clickedTodoId: number\n};\n\nexport const TodoList = (\n  { todos, onEyeButtonClick, clickedTodoId }: TodoListProps,\n) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const todoId = todo.id;\n        const buttonClassName = classNames(\n          'far',\n          `fa-eye${todoId === clickedTodoId ? '-slash' : ''}`,\n        );\n\n        return (\n          <TodoInfo\n            key={todoId}\n            todo={todo}\n            onEyeButtonClick={onEyeButtonClick}\n            detailsButtonClassNames={buttonClassName}\n          />\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { ChangeEvent, useState } from 'react';\nimport { FilterMode } from '../../types/FilterMode';\n\ntype TodoFilterProps = {\n  getTodos: (mode: FilterMode, query: string) => void\n};\n\nexport const TodoFilter = ({ getTodos }: TodoFilterProps) => {\n  const [filterMode, setFilterMode] = useState(FilterMode.all);\n  const [query, setQuery] = useState('');\n\n  const onChangeFilterOption = (event: ChangeEvent<HTMLSelectElement>) => {\n    let mode;\n\n    switch (event.target.value) {\n      default:\n      case 'all':\n        mode = FilterMode.all;\n        break;\n      case 'active':\n        mode = FilterMode.active;\n        break;\n      case 'completed':\n        mode = FilterMode.completed;\n    }\n\n    setFilterMode(mode);\n    getTodos(mode, query);\n  };\n\n  const onChangeQuery = (event: ChangeEvent<HTMLInputElement>) => {\n    const inputQuery = event.target.value;\n\n    setQuery(inputQuery);\n    getTodos(filterMode, inputQuery);\n  };\n\n  const onResetQuery = () => {\n    const input\n      = document.getElementsByClassName('input')[0] as HTMLInputElement;\n\n    input.value = '';\n    setQuery('');\n    getTodos(filterMode, '');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={onChangeFilterOption}>\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={onChangeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query !== '' && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={onResetQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { TodoModalInfo } from '../../types/TodoModalInfo';\nimport { Loader } from '../Loader';\n\ntype TodoModalProps = {\n  info: TodoModalInfo\n  onModalClose: () => void\n};\n\nexport const TodoModal = (\n  {\n    info: {\n      todoId,\n      todoTitle,\n      todoCompleted,\n      userEmail,\n      userName,\n      showModalLoader,\n    },\n    onModalClose,\n  }: TodoModalProps,\n) => {\n  const todoStatusClass = `has-text-${todoCompleted ? 'success' : 'danger'}`;\n  const todoStatusText = todoCompleted ? 'Done' : 'Planned';\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {showModalLoader ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todoId}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onModalClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todoTitle}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className={todoStatusClass}>{todoStatusText}</strong>\n\n              {' by '}\n\n              <a href={`mailto:${userEmail}`}>\n                {userName}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { FilterMode } from './types/FilterMode';\nimport { TodoModalInfo } from './types/TodoModalInfo';\nimport { User } from './types/User';\nimport { getTodos, getUser } from './api';\n\nlet fetchedTodos: Todo[] = [];\nconst initialModalInfo: TodoModalInfo = {\n  todoId: 0,\n  todoTitle: '',\n  todoCompleted: false,\n  userEmail: '',\n  userName: '',\n  showModalLoader: true,\n};\n\nexport const App: React.FC = () => {\n  const [displayedTodos, setDisplayedTodos] = useState<Todo[]>([]);\n  const [todosLoaded, setTodosLoaded] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [modalInfo, setModalInfo] = useState<TodoModalInfo>(initialModalInfo);\n  const [clickedTodoId, setClickedTodoId] = useState(0);\n\n  const displayTodos = (mode: FilterMode, query: string) => {\n    const modeActive = mode === FilterMode.active;\n    const modeCompleted = mode === FilterMode.completed;\n\n    let todos = fetchedTodos;\n\n    if (modeActive || modeCompleted) {\n      todos = todos.filter(todo => (modeCompleted ? todo.completed : !todo.completed));\n    }\n\n    if (query !== '') {\n      todos = todos.filter(\n        todo => todo.title.includes(query.trim().toLocaleLowerCase()),\n      );\n    }\n\n    setDisplayedTodos(todos);\n  };\n\n  const onEyeButtonClick = (todoId: number) => {\n    setShowModal(true);\n    setClickedTodoId(todoId);\n\n    const modalTodo = displayedTodos.find(todo => todo.id === todoId);\n\n    if (modalTodo) {\n      getUser(modalTodo?.userId)\n        .then((user: User) => {\n          setModalInfo({\n            todoId,\n            todoTitle: modalTodo?.title,\n            todoCompleted: modalTodo.completed,\n            userEmail: user.email,\n            userName: user.name,\n            showModalLoader: false,\n          });\n        });\n    }\n  };\n\n  const onModalClose = () => {\n    setShowModal(false);\n    setModalInfo((oldInfo) => ({\n      ...oldInfo,\n      showModalLoader: true,\n    }));\n    setClickedTodoId(0);\n  };\n\n  useEffect(() => {\n    getTodos()\n      .then(extracted => {\n        fetchedTodos = extracted;\n        setDisplayedTodos(fetchedTodos);\n        setTodosLoaded(true);\n\n        return extracted;\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter getTodos={displayTodos} />\n            </div>\n\n            <div className=\"block\">\n              {!todosLoaded && <Loader />}\n              <TodoList\n                todos={displayedTodos}\n                onEyeButtonClick={onEyeButtonClick}\n                clickedTodoId={clickedTodoId}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {showModal && (\n        <TodoModal\n          info={modalInfo}\n          onModalClose={onModalClose}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}